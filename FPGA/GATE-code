#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>

// Function to display a seven segment based on individual segments
void display_segments(int a, int b, int c, int d, int e, int f, int g) {
    // Display the seven-segment display
    printf(" %s \n", a ? " _____ " : "       ");
    printf("%s%s\n", f ? "|" : " ", b ? "     |" : "      ");
    printf("%s%s\n", f ? "|" : " ", b ? "     |" : "      ");
    printf("%s%s\n", g ? " ----- " : "       ");
    printf("%s%s\n", e ? "|" : " ", c ? "     |" : "      ");
    printf("%s%s\n", e ? "|" : " ", c ? "     |" : "      ");
    printf(" %s \n", d ? " _____ " : "       ");
    
    printf("\n");
    printf("Segments status (a,b,c,d,e,f,g): %d,%d,%d,%d,%d,%d,%d\n", a, b, c, d, e, f, g);
}

// Function to display a digit as a seven segment
void display_digit(int digit) {
    // Define the segments for each digit (0-9)
    // Each digit is represented by 7 segments (a,b,c,d,e,f,g)
    // 1 means segment is ON, 0 means segment is OFF
    int segments[10][7] = {
        {1, 1, 1, 1, 1, 1, 0}, // 0
        {0, 1, 1, 0, 0, 0, 0}, // 1
        {1, 1, 0, 1, 1, 0, 1}, // 2
        {1, 1, 1, 1, 0, 0, 1}, // 3
        {0, 1, 1, 0, 0, 1, 1}, // 4
        {1, 0, 1, 1, 0, 1, 1}, // 5
        {1, 0, 1, 1, 1, 1, 1}, // 6
        {1, 1, 1, 0, 0, 0, 0}, // 7
        {1, 1, 1, 1, 1, 1, 1}, // 8
        {1, 1, 1, 1, 0, 1, 1}  // 9
    };
    
    // Check if digit is valid
    if (digit < 0 || digit > 9) {
        printf("Invalid digit: %d\n", digit);
        return;
    }
    
    // Clear the terminal
    printf("\033[2J\033[H");
    
    printf("Displaying digit: %d\n\n", digit);
    
    // Extract segments for the given digit
    int a = segments[digit][0];
    int b = segments[digit][1];
    int c = segments[digit][2];
    int d = segments[digit][3];
    int e = segments[digit][4];
    int f = segments[digit][5];
    int g = segments[digit][6];
    
    display_segments(a, b, c, d, e, f, g);
}

// Function to evaluate the boolean expression A•B̄•C̄ + Ā•D
bool evaluate_expression(bool A, bool B, bool C, bool D) {
    return (A && !B && !C) || (!A && D);
}

// Function to calculate segments for a boolean expression
void calculate_boolean_segments(bool A, bool B, bool C, bool D) {
    // A•B̄•C̄ + Ā•D
    bool result = evaluate_expression(A, B, C, D);
    
    // Clear the terminal
    printf("\033[2J\033[H");
    
    printf("Boolean Expression: A•B̄•C̄ + Ā•D\n");
    printf("Values: A=%d, B=%d, C=%d, D=%d\n", A, B, C, D);
    printf("Result: %d\n\n", result);
    
    // Let's map the result to segments
    // If result is TRUE, show "1"
    // If result is FALSE, show "0"
    if (result) {
        // Display "1" on seven segment
        display_segments(0, 1, 1, 0, 0, 0, 0);
    } else {
        // Display "0" on seven segment
        display_segments(1, 1, 1, 1, 1, 1, 0);
    }
}

// Function to display truth table for A•B̄•C̄ + Ā•D
void display_truth_table() {
    printf("\033[2J\033[H"); // Clear screen
    printf("Truth Table for A•B̄•C̄ + Ā•D\n\n");
    printf(" A | B | C | D | Result\n");
    printf("-------------------\n");
    
    for (int i = 0; i < 16; i++) {
        bool A = (i & 8) > 0;
        bool B = (i & 4) > 0;
        bool C = (i & 2) > 0;
        bool D = (i & 1) > 0;
        bool result = evaluate_expression(A, B, C, D);
        
        printf(" %d | %d | %d | %d | %d\n", A, B, C, D, result);
    }
    
    printf("\nPress Enter to continue...");
    getchar(); // Wait for Enter
}

// Simple menu
void display_menu() {
    printf("\033[2J\033[H"); // Clear screen
    printf("===== Boolean Expression and Seven Segment Display Simulator =====\n\n");
    printf("1. Display digit (0-9)\n");
    printf("2. Evaluate Boolean Expression A•B̄•C̄ + Ā•D\n");
    printf("3. Display Truth Table for A•B̄•C̄ + Ā•D\n");
    printf("4. Exit\n\n");
    printf("Enter your choice: ");
}

int main() {
    int choice, digit;
    bool A, B, C, D;
    
    while (1) {
        display_menu();
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter digit (0-9): ");
                scanf("%d", &digit);
                if (digit >= 0 && digit <= 9) {
                    display_digit(digit);
                    printf("\nPress Enter to continue...");
                    getchar(); // Consume newline
                    getchar(); // Wait for Enter
                } else {
                    printf("Invalid digit. Please enter a number between 0 and 9.\n");
                    sleep(2);
                }
                break;
                
            case 2:
                printf("Enter value for A (0 or 1): ");
                scanf("%d", &digit);
                A = digit != 0;
                printf("Enter value for B (0 or 1): ");
                scanf("%d", &digit);
                B = digit != 0;
                printf("Enter value for C (0 or 1): ");
                scanf("%d", &digit);
                C = digit != 0;
                printf("Enter value for D (0 or 1): ");
                scanf("%d", &digit);
                D = digit != 0;
                
                calculate_boolean_segments(A, B, C, D);
                printf("\nPress Enter to continue...");
                getchar(); // Consume newline
                getchar(); // Wait for Enter
                break;
                
            case 3:
                display_truth_table();
                break;
                
            case 4:
                printf("Exiting program. Goodbye!\n");
                return 0;
                
            default:
                printf("Invalid choice. Please try again.\n");
                sleep(2);
                break;
        }
    }
    
    return 0;
}
