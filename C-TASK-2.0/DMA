1. create an integer dynamically,read and print its value.
#include <stdio.h>
#include <stdlib.h>
int main() {
    int *p = malloc(sizeof(int));
    scanf("%d", p);
    printf("%d", *p);
    free(p);
    return 0;
}
2) create a string dynamically, read and print its value.
#include <stdio.h>
#include <stdlib.h>
int main() {
    char *str = (char *)malloc(100 * sizeof(char));
    if (str == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }
    printf("Enter a word: ");
    scanf("%s", str);  
    printf("You entered: %s\n", str);
    free(str);
    return 0;
}
3) create a string dynamically, copy a string constant to it ( "Kernel"). Create another string dynamically. Copy the first string to the second string.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
    char *str1 = (char *)malloc(10); 
    strcpy(str1, "Kernel");
    char *str2 = (char *)malloc(strlen(str1) + 1); 
    strcpy(str2, str1);  
    printf("First string: %s\n", str1);
    printf("Second string: %s\n", str2);
    free(str1);
    free(str2);

    return 0;
}
4) Create a dynamic array of integers. Take input from user , sort the array and display the output.
#include <stdio.h>
#include <stdlib.h>
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}
int main() {
    int n, i;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }
    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    qsort(arr, n, sizeof(int), compare);
    printf("Sorted array:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    free(arr);
    return 0;
}
5) Implement itoa function and return the string from the function. Print the result in main. itoa function takes an integer as input, and stores the integer in a string.
#include <stdio.h>
#include <stdlib.h>
char* my_itoa(int num) {
    char *str = malloc(20); 
    sprintf(str, "%d", num); 
    return str;
}
int main() {
    int n;
    printf("Enter a number: ");
    scanf("%d", &n);
    char *result = my_itoa(n);
    printf("String: %s\n", result);
    free(result); 
    return 0;
}

6) Write a function, that takes two strings as input and concatenates only the first n characters from first string and first m characters from second string and makes a new string.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* custom_concat(const char *str1, const char *str2, int n, int m) {
    char *result = (char *)malloc(n + m + 1);
    strncpy(result, str1, n);
    strncpy(result + n, str2, m);

    result[n + m] = '\0';
    return result;
}

int main() {
    char s1[100], s2[100];
    int n, m;
    printf("Enter first string: ");
    scanf("%s", s1);
    printf("Enter second string: ");
    scanf("%s", s2);
    printf("Enter number of characters to take from first string: ");
    scanf("%d", &n);
    printf("Enter number of characters to take from second string: ");
    scanf("%d", &m);
    char *result = custom_concat(s1, s2, n, m);
    printf("Concatenated string: %s\n", result);
    free(result);
    return 0;
}
8)  Write a function that takes two sorted integer arrays as input, and returns an array of integers from both arrays in sorted order, excluding duplicate numbers. 
Assume that the input arrays are sorted.
#include <stdio.h>
int main() {
    int arr1[] = {10, 12, 13, 14, 15, 16};
    int arr2[] = {9, 12, 15, 19, 20};
    int size1 = 6, size2 = 5;
    int i = 0, j = 0, k = 0;
    int result[20];
    while (i < size1 && j < size2) {
        if (arr1[i] < arr2[j]) {
            if (k == 0 || result[k-1] != arr1[i])
                result[k++] = arr1[i];
            i++;
        } else if (arr2[j] < arr1[i]) {
            if (k == 0 || result[k-1] != arr2[j])
                result[k++] = arr2[j];
            j++;
        } else {
            // Equal elements
            if (k == 0 || result[k-1] != arr1[i])
                result[k++] = arr1[i];
            i++;
            j++;
        }
    }
    while (i < size1) {
        if (k == 0 || result[k-1] != arr1[i])
            result[k++] = arr1[i];
        i++;
    }
    while (j < size2) {
        if (k == 0 || result[k-1] != arr2[j])
            result[k++] = arr2[j];
        j++;
    }
    printf("Merged array without duplicates:\n");
    for (i = 0; i < k; i++) {
        printf("%d ", result[i]);
    }

    return 0;
}



