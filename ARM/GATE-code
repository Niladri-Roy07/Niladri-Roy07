module xy_yz_logic(
    input wire X,
    input wire Y,
    input wire Z,
    output wire F
);
    
    // Intermediate wires
    wire XY;  // For X AND Y
    wire YZ;  // For Y AND Z
    
    // Implement the logic XY+YZ
    assign XY = X & Y;
    assign YZ = Y & Z;
    assign F = XY | YZ;
    
endmodule

// Testbench for verification
module xy_yz_logic_tb;
    reg X, Y, Z;
    wire F;
    
    // Instantiate the module
    xy_yz_logic dut(
        .X(X),
        .Y(Y),
        .Z(Z),
        .F(F)
    );
    
    initial begin
        // Test all possible combinations
        $display("X Y Z | F");
        $display("------|--");
        
        X = 0; Y = 0; Z = 0; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 0; Y = 0; Z = 1; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 0; Y = 1; Z = 0; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 0; Y = 1; Z = 1; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 1; Y = 0; Z = 0; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 1; Y = 0; Z = 1; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 1; Y = 1; Z = 0; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        X = 1; Y = 1; Z = 1; #10;
        $display("%b %b %b | %b", X, Y, Z, F);
        
        $finish;
    end
endmodule
